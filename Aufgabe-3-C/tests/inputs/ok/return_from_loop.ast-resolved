(Program) {
    .items = [
        [0] = GlobalVar((VarDef) {
            .data_type = int,
            .res_ident = (ResIdent) {
                .ident = "count",
                .res = (DefId) 0
            },
            .init = None()
        }),
        [1] = Func((FuncDef) {
            .return_type = int,
            .ident = "check_while",
            .params = [],
            .statements = [
                [0] = Assign((Assign) {
                    .lhs = (ResIdent) {
                        .ident = "count",
                        .res = (DefId) 0
                    },
                    .rhs = Literal(int, Int(0))
                }),
                [1] = While((WhileStmt) {
                    .cond = BinaryOp(bool, (BinOpExpr) {
                        .op = Gt,
                        .lhs = Assign(int, (Assign) {
                            .lhs = (ResIdent) {
                                .ident = "count",
                                .res = (DefId) 0
                            },
                            .rhs = BinaryOp(int, (BinOpExpr) {
                                .op = Add,
                                .lhs = Var(int, (ResIdent) {
                                    .ident = "count",
                                    .res = (DefId) 0
                                }),
                                .rhs = Literal(int, Int(1))
                            })
                        }),
                        .rhs = Literal(int, Int(0))
                    }),
                    .body = Block((Block) {
                        .statements = [
                            [0] = Return(Literal(int, Int(1)))
                        ]
                    })
                }),
                [2] = Print(String("after while should be unreachable"))
            ]
        }),
        [2] = Func((FuncDef) {
            .return_type = int,
            .ident = "check_do_while",
            .params = [],
            .statements = [
                [0] = DoWhile((WhileStmt) {
                    .cond = Literal(bool, Bool(false)),
                    .body = Block((Block) {
                        .statements = [
                            [0] = Return(Literal(int, Int(2)))
                        ]
                    })
                }),
                [1] = Print(String("after do-while should be unreachable"))
            ]
        }),
        [3] = Func((FuncDef) {
            .return_type = int,
            .ident = "check_for",
            .params = [],
            .statements = [
                [0] = For((ForStmt) {
                    .init = Assign((Assign) {
                        .lhs = (ResIdent) {
                            .ident = "count",
                            .res = (DefId) 0
                        },
                        .rhs = Literal(int, Int(0))
                    }),
                    .cond = BinaryOp(bool, (BinOpExpr) {
                        .op = Gt,
                        .lhs = Assign(int, (Assign) {
                            .lhs = (ResIdent) {
                                .ident = "count",
                                .res = (DefId) 0
                            },
                            .rhs = BinaryOp(int, (BinOpExpr) {
                                .op = Add,
                                .lhs = Var(int, (ResIdent) {
                                    .ident = "count",
                                    .res = (DefId) 0
                                }),
                                .rhs = Literal(int, Int(1))
                            })
                        }),
                        .rhs = Literal(int, Int(0))
                    }),
                    .update = (Assign) {
                        .lhs = (ResIdent) {
                            .ident = "count",
                            .res = (DefId) 0
                        },
                        .rhs = BinaryOp(int, (BinOpExpr) {
                            .op = Add,
                            .lhs = Var(int, (ResIdent) {
                                .ident = "count",
                                .res = (DefId) 0
                            }),
                            .rhs = Literal(int, Int(1))
                        })
                    },
                    .body = Block((Block) {
                        .statements = [
                            [0] = Return(Literal(int, Int(3)))
                        ]
                    })
                }),
                [1] = Print(String("after for should be unreachable"))
            ]
        }),
        [4] = Func((FuncDef) {
            .return_type = void,
            .ident = "main",
            .params = [],
            .statements = [
                [0] = VarDef((VarDef) {
                    .data_type = int,
                    .res_ident = (ResIdent) {
                        .ident = "res",
                        .res = (DefId) 5
                    },
                    .init = Call(int, (FuncCall) {
                        .res_ident = (ResIdent) {
                            .ident = "check_while",
                            .res = (DefId) 1
                        },
                        .args = []
                    })
                }),
                [1] = If((IfStmt) {
                    .cond = BinaryOp(bool, (BinOpExpr) {
                        .op = Neq,
                        .lhs = Var(int, (ResIdent) {
                            .ident = "res",
                            .res = (DefId) 5
                        }),
                        .rhs = Literal(int, Int(1))
                    }),
                    .if_true = Block((Block) {
                        .statements = [
                            [0] = Print(String("wrong return value from while"))
                        ]
                    }),
                    .if_false = Empty()
                }),
                [2] = If((IfStmt) {
                    .cond = BinaryOp(bool, (BinOpExpr) {
                        .op = Neq,
                        .lhs = Var(int, (ResIdent) {
                            .ident = "count",
                            .res = (DefId) 0
                        }),
                        .rhs = Literal(int, Int(1))
                    }),
                    .if_true = Block((Block) {
                        .statements = [
                            [0] = Print(String("while condition evaluated too often"))
                        ]
                    }),
                    .if_false = Empty()
                }),
                [3] = Assign((Assign) {
                    .lhs = (ResIdent) {
                        .ident = "res",
                        .res = (DefId) 5
                    },
                    .rhs = Call(int, (FuncCall) {
                        .res_ident = (ResIdent) {
                            .ident = "check_do_while",
                            .res = (DefId) 2
                        },
                        .args = []
                    })
                }),
                [4] = If((IfStmt) {
                    .cond = BinaryOp(bool, (BinOpExpr) {
                        .op = Neq,
                        .lhs = Var(int, (ResIdent) {
                            .ident = "res",
                            .res = (DefId) 5
                        }),
                        .rhs = Literal(int, Int(2))
                    }),
                    .if_true = Block((Block) {
                        .statements = [
                            [0] = Print(String("wrong return value from do-while"))
                        ]
                    }),
                    .if_false = Empty()
                }),
                [5] = Assign((Assign) {
                    .lhs = (ResIdent) {
                        .ident = "res",
                        .res = (DefId) 5
                    },
                    .rhs = Call(int, (FuncCall) {
                        .res_ident = (ResIdent) {
                            .ident = "check_for",
                            .res = (DefId) 3
                        },
                        .args = []
                    })
                }),
                [6] = If((IfStmt) {
                    .cond = BinaryOp(bool, (BinOpExpr) {
                        .op = Neq,
                        .lhs = Var(int, (ResIdent) {
                            .ident = "res",
                            .res = (DefId) 5
                        }),
                        .rhs = Literal(int, Int(3))
                    }),
                    .if_true = Block((Block) {
                        .statements = [
                            [0] = Print(String("wrong return value from for"))
                        ]
                    }),
                    .if_false = Empty()
                }),
                [7] = If((IfStmt) {
                    .cond = BinaryOp(bool, (BinOpExpr) {
                        .op = Neq,
                        .lhs = Var(int, (ResIdent) {
                            .ident = "count",
                            .res = (DefId) 0
                        }),
                        .rhs = Literal(int, Int(1))
                    }),
                    .if_true = Block((Block) {
                        .statements = [
                            [0] = Print(String("for condition or update evaluated too often"))
                        ]
                    }),
                    .if_false = Empty()
                }),
                [8] = Print(String("done"))
            ]
        })
    ]
}
(Symtab) {
    .definitions = [
        [0] = GlobalVar("count", (SymVar) {
            .data_type = int,
            .index = 0
        }),
        [1] = Func("check_while", (SymFunc) {
            .item_id = (ItemId) 1,
            .return_type = int,
            .stack_size = 0,
            .param_count = 0,
            .local_vars = []
        }),
        [2] = Func("check_do_while", (SymFunc) {
            .item_id = (ItemId) 2,
            .return_type = int,
            .stack_size = 0,
            .param_count = 0,
            .local_vars = []
        }),
        [3] = Func("check_for", (SymFunc) {
            .item_id = (ItemId) 3,
            .return_type = int,
            .stack_size = 0,
            .param_count = 0,
            .local_vars = []
        }),
        [4] = Func("main", (SymFunc) {
            .item_id = (ItemId) 4,
            .return_type = void,
            .stack_size = 1,
            .param_count = 0,
            .local_vars = [
                [0] = LocalVar("res", (SymVar) {
                    .data_type = int,
                    .index = 0
                })
            ]
        }),
        [5] = LocalVar("res", (SymVar) {
            .data_type = int,
            .index = 0
        })
    ]
}
