(Program) {
    .items = [
        [0] = Func((FuncDef) {
            .return_type = float,
            .ident = "test",
            .params = [
                [0] = (FuncParam) {
                    .data_type = int,
                    .ident = "x"
                },
                [1] = (FuncParam) {
                    .data_type = int,
                    .ident = "y"
                }
            ],
            .statements = [
                [0] = VarDef((VarDef) {
                    .data_type = int,
                    .res_ident = (ResIdent) {
                        .ident = "a"
                    },
                    .init = Literal(Int(1))
                }),
                [1] = VarDef((VarDef) {
                    .data_type = int,
                    .res_ident = (ResIdent) {
                        .ident = "b"
                    },
                    .init = Literal(Int(2))
                }),
                [2] = VarDef((VarDef) {
                    .data_type = float,
                    .res_ident = (ResIdent) {
                        .ident = "c"
                    },
                    .init = Literal(Float(3.5))
                }),
                [3] = VarDef((VarDef) {
                    .data_type = float,
                    .res_ident = (ResIdent) {
                        .ident = "d"
                    },
                    .init = Literal(Float(4.5))
                }),
                [4] = VarDef((VarDef) {
                    .data_type = bool,
                    .res_ident = (ResIdent) {
                        .ident = "e"
                    },
                    .init = Literal(Bool(true))
                }),
                [5] = VarDef((VarDef) {
                    .data_type = bool,
                    .res_ident = (ResIdent) {
                        .ident = "f"
                    },
                    .init = Literal(Bool(false))
                }),
                [6] = Assign((Assign) {
                    .lhs = (ResIdent) {
                        .ident = "c"
                    },
                    .rhs = BinaryOp((BinOpExpr) {
                        .op = Sub,
                        .lhs = BinaryOp((BinOpExpr) {
                            .op = Add,
                            .lhs = Var((ResIdent) {
                                .ident = "a"
                            }),
                            .rhs = BinaryOp((BinOpExpr) {
                                .op = Div,
                                .lhs = BinaryOp((BinOpExpr) {
                                    .op = Mul,
                                    .lhs = Var((ResIdent) {
                                        .ident = "b"
                                    }),
                                    .rhs = Var((ResIdent) {
                                        .ident = "c"
                                    })
                                }),
                                .rhs = BinaryOp((BinOpExpr) {
                                    .op = Mul,
                                    .lhs = Var((ResIdent) {
                                        .ident = "d"
                                    }),
                                    .rhs = Var((ResIdent) {
                                        .ident = "a"
                                    })
                                })
                            })
                        }),
                        .rhs = BinaryOp((BinOpExpr) {
                            .op = Div,
                            .lhs = Var((ResIdent) {
                                .ident = "a"
                            }),
                            .rhs = Var((ResIdent) {
                                .ident = "d"
                            })
                        })
                    })
                }),
                [7] = Assign((Assign) {
                    .lhs = (ResIdent) {
                        .ident = "c"
                    },
                    .rhs = Assign((Assign) {
                        .lhs = (ResIdent) {
                            .ident = "a"
                        },
                        .rhs = Var((ResIdent) {
                            .ident = "b"
                        })
                    })
                }),
                [8] = Assign((Assign) {
                    .lhs = (ResIdent) {
                        .ident = "c"
                    },
                    .rhs = Assign((Assign) {
                        .lhs = (ResIdent) {
                            .ident = "d"
                        },
                        .rhs = Var((ResIdent) {
                            .ident = "a"
                        })
                    })
                }),
                [9] = Return(BinaryOp((BinOpExpr) {
                    .op = Add,
                    .lhs = Var((ResIdent) {
                        .ident = "a"
                    }),
                    .rhs = Var((ResIdent) {
                        .ident = "b"
                    })
                }))
            ]
        }),
        [1] = Func((FuncDef) {
            .return_type = void,
            .ident = "main",
            .params = [],
            .statements = [
                [0] = VarDef((VarDef) {
                    .data_type = int,
                    .res_ident = (ResIdent) {
                        .ident = "a"
                    },
                    .init = Literal(Int(1))
                }),
                [1] = VarDef((VarDef) {
                    .data_type = int,
                    .res_ident = (ResIdent) {
                        .ident = "b"
                    },
                    .init = Literal(Int(2))
                }),
                [2] = Print(Expr(Call((FuncCall) {
                    .res_ident = (ResIdent) {
                        .ident = "test"
                    },
                    .args = [
                        [0] = Var((ResIdent) {
                            .ident = "a"
                        }),
                        [1] = Var((ResIdent) {
                            .ident = "b"
                        })
                    ]
                })))
            ]
        })
    ]
}
